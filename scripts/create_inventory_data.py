#!/usr/bin/env python3
"""
Script t·∫°o d·ªØ li·ªáu inventory v√† finance  
Ch·∫°y: python create_inventory_data.py
"""
import os
import sys
import django
from django.db import transaction
from decimal import Decimal
from datetime import date, datetime, timedelta
import random
from django.utils import timezone

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'agency_management.settings')
django.setup()

from authentication.models import Account, User
from agency.models import AgencyType, District, Agency, StaffAgency
from inventory.models import Unit, Item, Receipt, ReceiptDetail, Issue, IssueDetail
from finance.models import Payment, Report
from regulation.models import Regulation

random.seed(42)  # For reproducible data

def create_units_and_items():
    """T·∫°o ƒë∆°n v·ªã v√† s·∫£n ph·∫©m"""
    print("üì¶ Creating units and items...")
    
    # Units
    units_data = ['C√°i', 'H·ªôp', 'Th√πng', 'Kg', 'L√≠t', 'G√≥i', 'Chai', 'T√∫i', 'B·ªô', 'Chi·∫øc', 'T√°', 'Ch·ª•c']
    for unit_name in units_data:
        if not Unit.objects.filter(unit_name=unit_name).exists():
            Unit.objects.create(unit_name=unit_name)
    
    # Items  
    items_data = [
        ('S·ªØa t∆∞∆°i Vinamilk 1L', 'H·ªôp', 25000, 150),
        ('B√°nh m√¨ sandwich', 'C√°i', 8000, 200),
        ('N∆∞·ªõc ng·ªçt Coca Cola 330ml', 'Chai', 12000, 300),
        ('Bia Heineken 330ml', 'Chai', 22000, 180),
        ('C√† ph√™ G7 3in1', 'H·ªôp', 45000, 120),
        ('Tr√† xanh 0 ƒë·ªô 450ml', 'Chai', 15000, 250),
        ('N∆∞·ªõc su·ªëi Lavie 500ml', 'Chai', 5000, 500),
        ('B√°nh quy Oreo', 'G√≥i', 18000, 180),
        ('K·∫πo Alpenliebe', 'G√≥i', 25000, 150),
        ('Chocolate Kitkat', 'C√°i', 12000, 200),
        ('M√¨ t√¥m H·∫£o H·∫£o', 'G√≥i', 4000, 800),
        ('C∆°m h·ªôp Kinh ƒê√¥', 'H·ªôp', 35000, 100),
        ('X√∫c x√≠ch CP 500g', 'G√≥i', 55000, 80),
        ('Ch·∫£ c√° Thanh H√≥a', 'Kg', 180000, 50),
        ('T√¥m kh√¥ C√† Mau', 'Kg', 350000, 30),
        ('M·∫Øm t√¥m T√¢y Ninh', 'Chai', 45000, 70),
        ('G·∫°o ST25 ƒê·ªìng Th√°p', 'Kg', 35000, 200),
        ('ƒê∆∞·ªùng tr·∫Øng Bi√™n H√≤a', 'Kg', 22000, 300),
        ('Mu·ªëi i-·ªët Vi·ªát Nam', 'G√≥i', 8000, 150),
        ('D·∫ßu ƒÉn Neptune 1L', 'Chai', 65000, 120),
        ('T∆∞∆°ng ·ªõt Cholimex', 'Chai', 28000, 100),
        ('N∆∞·ªõc m·∫Øm Nam Ng∆∞', 'Chai', 45000, 90),
        ('B√°nh tr√°ng T√¢y Ninh', 'G√≥i', 15000, 200),
        ('Chao H√† N·ªôi', 'H·ªôp', 25000, 80),
        ('D∆∞a chua ƒê√† L·∫°t', 'G√≥i', 20000, 100),
        ('Rau mu·ªëng s·∫°ch', 'Kg', 12000, 50),
        ('C√† chua ƒê√† L·∫°t', 'Kg', 25000, 80),
        ('Khoai t√¢y ƒê√† L·∫°t', 'Kg', 30000, 100),
        ('H√†nh t√¢y Vinh', 'Kg', 18000, 120),
        ('T·ªèi L√Ω S∆°n', 'Kg', 85000, 60),
        ('·ªöt hi·ªÉm Ngh·ªá An', 'Kg', 120000, 40),
        ('Th·ªãt heo s·∫°ch CP', 'Kg', 180000, 100),
        ('Th·ªãt b√≤ √öc', 'Kg', 350000, 50),
        ('G√† ta Ki·∫øn Giang', 'Kg', 120000, 80),
        ('C√° tra Vƒ©nh Long', 'Kg', 65000, 90),
        ('T√¥m s√∫ C√† Mau', 'Kg', 450000, 40),
        ('Cua bi·ªÉn Ki√™n Giang', 'Kg', 280000, 30),
        ('S·ªØa chua Vinamilk', 'H·ªôp', 8000, 300),
        ('Yaourt Kun', 'H·ªôp', 6000, 250),
        ('Kem Merino', 'C√°i', 15000, 180),
        ('B√°nh bao CJ', 'C√°i', 12000, 150),
        ('Nem chua Thanh H√≥a', 'G√≥i', 35000, 70),
        ('Ch·∫£ l·ª•a H√† N·ªôi', 'Kg', 150000, 60),
        ('Gi√≤ th·ªß Nam ƒê·ªãnh', 'Kg', 180000, 40),
        ('B√°nh ch∆∞ng H∆∞ng Y√™n', 'C√°i', 45000, 100),
        ('B√°nh t√©t Tr√† Vinh', 'C√°i', 40000, 80),
        ('R∆∞·ª£u vang ƒê√† L·∫°t', 'Chai', 185000, 50),
        ('Bia S√†i G√≤n 330ml', 'Chai', 18000, 200),
        ('Vodka Hanoi', 'Chai', 250000, 30),
        ('Whisky Chivas', 'Chai', 850000, 20),
    ]
    
    items_created = 0
    for item_name, unit_name, price, stock in items_data:
        if not Item.objects.filter(item_name=item_name).exists():
            try:
                unit = Unit.objects.get(unit_name=unit_name)
                Item.objects.create(
                    item_name=item_name,
                    unit=unit,
                    price=Decimal(str(price)),
                    stock_quantity=stock,
                    description=f'M√¥ t·∫£ cho {item_name}'
                )
                items_created += 1
            except Unit.DoesNotExist:
                print(f"‚ö†Ô∏è  Unit {unit_name} not found for {item_name}")
                continue
    
    print(f"‚úÖ Created {items_created} new items, total: {Item.objects.count()} items and {Unit.objects.count()} units")

def create_receipts_and_details():
    """T·∫°o phi·∫øu nh·∫≠p v√† chi ti·∫øt"""
    print("üìã Creating receipts and details...")
    
    agencies = list(Agency.objects.all())
    staff_users = list(User.objects.filter(account__account_role='staff'))
    items = list(Item.objects.all())
    
    if not agencies or not staff_users or not items:
        print("‚ö†Ô∏è  Missing required data for receipts")
        return
    
    receipts_created = 0
    details_created = 0
    
    # T·∫°o 100 phi·∫øu nh·∫≠p trong 2 th√°ng qua
    for i in range(100):
        agency = random.choice(agencies)
        user = random.choice(staff_users)
        days_ago = random.randint(1, 60)
        receipt_date = date.today() - timedelta(days=days_ago)
        
        receipt = Receipt.objects.create(
            receipt_date=receipt_date,
            user=user,
            agency=agency,
            total_amount=Decimal('0')  # S·∫Ω ƒë∆∞·ª£c trigger t√≠nh to√°n
        )
        receipts_created += 1
        
        # T·∫°o chi ti·∫øt cho m·ªói phi·∫øu (2-5 s·∫£n ph·∫©m)
        num_items = random.randint(2, 5)
        selected_items = random.sample(items, min(num_items, len(items)))
        
        for item in selected_items:
            quantity = random.randint(5, 50)
            unit_price = item.price
            line_total = quantity * unit_price
            
            ReceiptDetail.objects.create(
                receipt=receipt,
                item=item,
                quantity=quantity,
                unit_price=unit_price,
                line_total=line_total
            )
            details_created += 1
    
    print(f"‚úÖ Created {receipts_created} receipts and {details_created} receipt details")

def create_issues_and_details():
    """T·∫°o phi·∫øu xu·∫•t v√† chi ti·∫øt"""
    print("üì§ Creating issues and details...")
    
    agencies = list(Agency.objects.all())
    staff_users = list(User.objects.filter(account__account_role='staff'))
    items = list(Item.objects.filter(stock_quantity__gt=10))  # Ch·ªâ l·∫•y item c√≥ stock > 10
    
    if not agencies or not staff_users or not items:
        print("‚ö†Ô∏è  Missing required data for issues")
        return
    
    issues_created = 0
    details_created = 0
    
    # T·∫°o 150 phi·∫øu xu·∫•t trong 2 th√°ng qua
    for i in range(150):
        agency = random.choice(agencies)
        user = random.choice(staff_users)
        days_ago = random.randint(1, 60)
        issue_date = date.today() - timedelta(days=days_ago)
        
        try:
            issue = Issue.objects.create(
                issue_date=issue_date,
                agency=agency,
                user=user,
                total_amount=Decimal('0')  # S·∫Ω ƒë∆∞·ª£c trigger t√≠nh to√°n
            )
            issues_created += 1
            
            # T·∫°o chi ti·∫øt cho m·ªói phi·∫øu (1-3 s·∫£n ph·∫©m)
            num_items = random.randint(1, 3)
            available_items = [item for item in items if item.stock_quantity > 5]
            if not available_items:
                continue
                
            selected_items = random.sample(available_items, min(num_items, len(available_items)))
            
            for item in selected_items:
                max_quantity = min(item.stock_quantity // 3, 15)  # Kh√¥ng xu·∫•t qu√° 1/3 stock ho·∫∑c 15
                if max_quantity <= 0:
                    continue
                    
                quantity = random.randint(1, max_quantity)
                unit_price = item.price
                line_total = quantity * unit_price
                
                IssueDetail.objects.create(
                    issue=issue,
                    item=item,
                    quantity=quantity,
                    unit_price=unit_price,
                    line_total=line_total
                )
                details_created += 1
        except Exception as e:
            print(f"‚ö†Ô∏è  Error creating issue {i}: {e}")
            continue
    
    print(f"‚úÖ Created {issues_created} issues and {details_created} issue details")

def create_payments():
    """T·∫°o thanh to√°n"""
    print("üí∞ Creating payments...")
    
    agencies = list(Agency.objects.filter(debt_amount__gt=0))  # Ch·ªâ agency c√≥ n·ª£
    staff_users = list(User.objects.filter(account__account_role='staff'))
    
    if not agencies or not staff_users:
        print("‚ö†Ô∏è  No agencies with debt or staff users found")
        return
    
    payments_created = 0
    
    # T·∫°o 60 thanh to√°n trong 2 th√°ng qua
    for i in range(60):
        if not agencies:
            break
            
        agency = random.choice(agencies)
        user = random.choice(staff_users)
        days_ago = random.randint(1, 60)
        payment_date = date.today() - timedelta(days=days_ago)
        
        # Thanh to√°n t·ª´ 10% ƒë·∫øn 40% n·ª£ hi·ªán t·∫°i
        max_payment = float(agency.debt_amount) * 0.4
        min_payment = min(100000, float(agency.debt_amount) * 0.1)
        
        if max_payment > min_payment:
            amount = random.uniform(min_payment, max_payment)
        else:
            amount = min_payment
        
        try:
            Payment.objects.create(
                payment_date=payment_date,
                agency=agency,
                user=user,
                amount_collected=Decimal(str(round(amount, 2)))
            )
            payments_created += 1
        except Exception as e:
            print(f"‚ö†Ô∏è  Error creating payment {i}: {e}")
            continue
    
    print(f"‚úÖ Created {payments_created} payments")

def create_regulations():
    """T·∫°o quy ƒë·ªãnh h·ªá th·ªëng"""
    print("‚öôÔ∏è Creating regulations...")
    
    admin_user = User.objects.filter(account__account_role='admin').first()
    
    if not admin_user:
        print("‚ö†Ô∏è  No admin user found")
        return
    
    regulations_data = [
        ('MAX_DEBT_LIMIT', '50000000', 'H·∫°n m·ª©c n·ª£ t·ªëi ƒëa m·∫∑c ƒë·ªãnh'),
        ('MAX_AGENCIES_PER_DISTRICT', '50', 'S·ªë l∆∞·ª£ng ƒë·∫°i l√Ω t·ªëi ƒëa m·ªói qu·∫≠n'),
        ('MIN_STOCK_ALERT', '10', 'C·∫£nh b√°o khi stock d∆∞·ªõi m·ª©c n√†y'),
        ('PAYMENT_TERMS_DAYS', '30', 'S·ªë ng√†y thanh to√°n'),
        ('AUTO_BACKUP_ENABLED', 'true', 'T·ª± ƒë·ªông backup database'),
        ('NOTIFICATION_EMAIL', 'admin@company.com', 'Email nh·∫≠n th√¥ng b√°o'),
        ('CURRENCY', 'VND', 'ƒê∆°n v·ªã ti·ªÅn t·ªá'),
        ('BUSINESS_HOURS', '08:00-17:00', 'Gi·ªù l√†m vi·ªác'),
        ('MAINTENANCE_MODE', 'false', 'Ch·∫ø ƒë·ªô b·∫£o tr√¨'),
        ('API_RATE_LIMIT', '1000', 'Gi·ªõi h·∫°n API calls/hour'),
    ]
    
    regulations_created = 0
    for key, value, desc in regulations_data:
        if not Regulation.objects.filter(regulation_key=key).exists():
            Regulation.objects.create(
                regulation_key=key,
                regulation_value=value,
                description=desc,
                last_updated_by=admin_user,
                updated_at=timezone.now()
            )
            regulations_created += 1
    
    print(f"‚úÖ Created {regulations_created} new regulations, total: {Regulation.objects.count()}")

def print_summary():
    """In t·ªïng k·∫øt d·ªØ li·ªáu ƒë√£ t·∫°o"""
    print("\n" + "="*60)
    print("üìà INVENTORY & FINANCE DATA SUMMARY")
    print("="*60)
    print(f"üë§ Accounts: {Account.objects.count()}")
    print(f"üë• Users: {User.objects.count()}")
    print(f"üè¢ Agency Types: {AgencyType.objects.count()}")
    print(f"üèòÔ∏è Districts: {District.objects.count()}")
    print(f"üè™ Agencies: {Agency.objects.count()}")
    print(f"üìè Units: {Unit.objects.count()}")
    print(f"üì¶ Items: {Item.objects.count()}")
    print(f"üìã Receipts: {Receipt.objects.count()}")
    print(f"üìã Receipt Details: {ReceiptDetail.objects.count()}")
    print(f"üì§ Issues: {Issue.objects.count()}")
    print(f"üì§ Issue Details: {IssueDetail.objects.count()}")
    print(f"üí∞ Payments: {Payment.objects.count()}")
    print(f"‚öôÔ∏è Regulations: {Regulation.objects.count()}")
    print("="*60)
    print("‚úÖ INVENTORY & FINANCE DATA CREATION COMPLETED!")
    print("="*60)

@transaction.atomic
def main():
    """Main function ƒë·ªÉ ch·∫°y t·∫•t c·∫£"""
    print("ÔøΩÔøΩ Starting inventory & finance data creation...")
    
    try:
        create_units_and_items()
        create_receipts_and_details()
        create_issues_and_details()
        create_payments()
        create_regulations()
        
        print_summary()
        
    except Exception as e:
        print(f"‚ùå Error occurred: {e}")
        import traceback
        traceback.print_exc()
        raise

if __name__ == '__main__':
    main()
