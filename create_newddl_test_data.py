#!/usr/bin/env python3
"""
Test data creator for newddl.sql schema format
Creates minimal test data to verify backend functionality
"""

import os
import sys
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'agency_management.settings')
django.setup()

from authentication.models import Account, User
from agency.models import AgencyType, District, Agency, StaffAgency  
from inventory.models import Unit, Item, Receipt, ReceiptDetail, Issue, IssueDetail
from finance.models import Payment, Report
from regulation.models import Regulation
from django.utils import timezone
from decimal import Decimal

def create_test_data():
    print("üöÄ Creating test data for newddl.sql format...")
    
    # 1. Create Accounts & Users
    print("üìù Creating accounts and users...")
    
    admin_account, _ = Account.objects.get_or_create(
        username='admin',
        defaults={
            'password_hash': 'scrypt:32768:8:1$2b2KsyDhdXhpJelc$eb9f9658e7c6a2b92a7b8b1c7f4d6e8a9c2b5d3f8e7a6c4e9b2a5c8f7d1e3b6a9c4f2d7e8b1a5c9f6d3e7b2a8c',
            'account_role': 'admin'
        }
    )
    
    staff_account, _ = Account.objects.get_or_create(
        username='staff1',
        defaults={
            'password_hash': 'scrypt:32768:8:1$2b2KsyDhdXhpJelc$eb9f9658e7c6a2b92a7b8b1c7f4d6e8a9c2b5d3f8e7a6c4e9b2a5c8f7d1e3b6a9c4f2d7e8b1a5c9f6d3e7b2a8c',
            'account_role': 'staff'
        }
    )
    
    agent_account, _ = Account.objects.get_or_create(
        username='agent1',
        defaults={
            'password_hash': 'scrypt:32768:8:1$2b2KsyDhdXhpJelc$eb9f9658e7c6a2b92a7b8b1c7f4d6e8a9c2b5d3f8e7a6c4e9b2a5c8f7d1e3b6a9c4f2d7e8b1a5c9f6d3e7b2a8c',
            'account_role': 'agent'
        }
    )
    
    admin_user, _ = User.objects.get_or_create(
        user_id=1,
        defaults={
            'account_id': admin_account.account_id,
            'full_name': 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng',
            'email': 'admin@company.com',
            'phone_number': '0123456789',
            'address': 'TP.HCM'
        }
    )
    
    staff_user, _ = User.objects.get_or_create(
        user_id=2,
        defaults={
            'account_id': staff_account.account_id,
            'full_name': 'Nh√¢n vi√™n kinh doanh',
            'email': 'staff1@company.com',
            'phone_number': '0987654321',
            'address': 'H√† N·ªôi'
        }
    )
    
    agent_user, _ = User.objects.get_or_create(
        user_id=3,
        defaults={
            'account_id': agent_account.account_id,
            'full_name': 'ƒê·∫°i l√Ω test',
            'email': 'agent1@company.com',
            'phone_number': '0123987654',
            'address': 'ƒê√† N·∫µng'
        }
    )
    
    # 2. Create Agency Types & Districts
    print("üè¢ Creating agency types and districts...")
    
    agency_type1, _ = AgencyType.objects.get_or_create(
        type_name='ƒê·∫°i l√Ω c·∫•p 1',
        defaults={
            'max_debt': Decimal('1000000000.00'),
            'description': 'ƒê·∫°i l√Ω c·∫•p 1 v·ªõi h·∫°n m·ª©c n·ª£ cao'
        }
    )
    
    agency_type2, _ = AgencyType.objects.get_or_create(
        type_name='ƒê·∫°i l√Ω c·∫•p 2',
        defaults={
            'max_debt': Decimal('500000000.00'),
            'description': 'ƒê·∫°i l√Ω c·∫•p 2 v·ªõi h·∫°n m·ª©c n·ª£ trung b√¨nh'
        }
    )
    
    district1, _ = District.objects.get_or_create(
        district_name='Qu·∫≠n 1',
        defaults={
            'city_name': 'TP.HCM',
            'max_agencies': 10
        }
    )
    
    district2, _ = District.objects.get_or_create(
        district_name='Qu·∫≠n 2',
        defaults={
            'city_name': 'TP.HCM',
            'max_agencies': 15
        }
    )
    
    district3, _ = District.objects.get_or_create(
        district_name='Ba ƒê√¨nh',
        defaults={
            'city_name': 'H√† N·ªôi',
            'max_agencies': 8
        }
    )
    
    # 3. Create Agencies
    print("üè™ Creating agencies...")
    
    agency1, _ = Agency.objects.get_or_create(
        agency_id=1,
        defaults={
            'agency_name': 'ƒê·∫°i l√Ω Kim Long Premium',
            'agency_type': agency_type1,
            'phone_number': '0123456789',
            'address': '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1',
            'district': district1,
            'email': 'kimlong@test.com',
            'representative': 'Nguy·ªÖn VƒÉn A',
            'reception_date': '2024-01-15',
            'debt_amount': Decimal('0.00'),
            'user_id': agent_user.user_id
        }
    )
    
    agency2, _ = Agency.objects.get_or_create(
        agency_id=2,
        defaults={
            'agency_name': 'ƒê·∫°i l√Ω Ho√†ng Gia Corporation',
            'agency_type': agency_type2,
            'phone_number': '0987654321',
            'address': '456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 2',
            'district': district2,
            'email': 'hoanggia@test.com',
            'representative': 'Tr·∫ßn Th·ªã B',
            'reception_date': '2024-02-20',
            'debt_amount': Decimal('0.00')
        }
    )
    
    # 4. Create Inventory Units & Items
    print("üì¶ Creating inventory units and items...")
    
    unit1, _ = Unit.objects.get_or_create(unit_name='Th√πng')
    unit2, _ = Unit.objects.get_or_create(unit_name='Chai')
    unit3, _ = Unit.objects.get_or_create(unit_name='Lon')
    unit4, _ = Unit.objects.get_or_create(unit_name='G√≥i')
    
    item1, _ = Item.objects.get_or_create(
        item_name='Bia Saigon Special th√πng 24 chai',
        defaults={
            'unit': unit1,
            'price': Decimal('240000.00'),
            'stock_quantity': 1000,
            'description': 'Bia Saigon Special ƒë√≥ng th√πng 24 chai'
        }
    )
    
    item2, _ = Item.objects.get_or_create(
        item_name='Bia Tiger Crystal chai 330ml',
        defaults={
            'unit': unit2,
            'price': Decimal('12000.00'),
            'stock_quantity': 5000,
            'description': 'Bia Tiger Crystal chai thu·ª∑ tinh 330ml'
        }
    )
    
    item3, _ = Item.objects.get_or_create(
        item_name='Bia Heineken lon 330ml',
        defaults={
            'unit': unit3,
            'price': Decimal('15000.00'),
            'stock_quantity': 3000,
            'description': 'Bia Heineken lon nh√¥m 330ml'
        }
    )
    
    # 5. Create Staff-Agency relationships
    print("üë• Creating staff-agency relationships...")
    
    StaffAgency.objects.get_or_create(
        staff_id=staff_user.user_id,
        agency=agency1
    )
    
    StaffAgency.objects.get_or_create(
        staff_id=staff_user.user_id,
        agency=agency2
    )
    
    # 6. Create Regulations
    print("‚öôÔ∏è Creating regulations...")
    
    Regulation.objects.get_or_create(
        regulation_key='max_debt_default',
        defaults={
            'regulation_value': '10000000',
            'description': 'H·∫°n m·ª©c n·ª£ m·∫∑c ƒë·ªãnh'
        }
    )
    
    Regulation.objects.get_or_create(
        regulation_key='min_stock_alert',
        defaults={
            'regulation_value': '100',
            'description': 'Ng∆∞·ª°ng c·∫£nh b√°o t·ªìn kho th·∫•p'
        }
    )
    
    Regulation.objects.get_or_create(
        regulation_key='payment_terms_days',
        defaults={
            'regulation_value': '30',
            'description': 'S·ªë ng√†y thanh to√°n'
        }
    )
    
    print("‚úÖ Test data creation completed!")
    print("")
    print("üìä SUMMARY:")
    print(f"  ‚Ä¢ Accounts: {Account.objects.count()}")
    print(f"  ‚Ä¢ Users: {User.objects.count()}")
    print(f"  ‚Ä¢ Agency Types: {AgencyType.objects.count()}")
    print(f"  ‚Ä¢ Districts: {District.objects.count()}")
    print(f"  ‚Ä¢ Agencies: {Agency.objects.count()}")
    print(f"  ‚Ä¢ Units: {Unit.objects.count()}")
    print(f"  ‚Ä¢ Items: {Item.objects.count()}")
    print(f"  ‚Ä¢ Staff-Agency: {StaffAgency.objects.count()}")
    print(f"  ‚Ä¢ Regulations: {Regulation.objects.count()}")
    print("")
    print("üéØ Ready for API testing!")

if __name__ == '__main__':
    create_test_data() 